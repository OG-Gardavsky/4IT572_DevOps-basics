name: build and tests our eshop workflow

on:
  workflow_dispatch:
  push:

jobs:
  Install:
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v2.5.0
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Setup NodeJS
        uses: actions/setup-node@v3.5.1
        with:
          node-version: 10

      - name: Cache
        uses: actions/cache@v3.0.11
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: node_modules-

      - name: Install packages with NPM
        run: |
          npm ci



  Build:
    needs: Install
    runs-on: ubuntu-latest

    steps:
      - name: code checkout
        uses: actions/checkout@v2.6.0
        with:
          repository: OG-Gardavsky/4IT572_DevOps-basics

      - name: setup NodeJs
        uses: actions/setup-node@v3.5.1
        with:
          node-version: 10

      - name: cache node modules
        uses: actions/cache@v3.2.0-beta.1
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Build
        run: |
          npm rebuild node-sass --force
          npm run build -- --colors


  Test:
    needs: Install
    runs-on: ubuntu-latest

    steps:
      - name: code checkout
        uses: actions/checkout@v2.6.0
        with:
          repository: OG-Gardavsky/4IT572_DevOps-basics

      - name: setup NodeJs
        uses: actions/setup-node@v3.5.1
        with:
          node-version: 10

      - name: cache node modules
        uses: actions/cache@v3.2.0-beta.1
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Run tests
        run: |
          npm run test -- --colors

    Deploy:
      name: Deploy eshop to AWS EC2 machine
      if: ${{ github.ref == 'refs/heads/master' }}
      runs-on: ubuntu-latest
      steps:

        - name: run via SSH
          uses: appleboy/ssh-action@v0.1.6
          with:
            host: ${{secrets.EC2_HOST}}
            username: ${{secrets.EC2_USERNAME}}
            key: ${{ secrets.AWS_KEY }}
            script: |
              cd 4IT572-ansible/ansible/
              ANSIBLE_HOST_KEY_CHECKING=False ~/.local/bin/ansible-playbook ec2_deploy.yml --extra-vars "access_key=${{secrets.AWS_ACCESS_KEY_ID}} secret_key=${{secrets.AWS_SECRET_ACCESS_KEY}} session_token=${{secrets.AWS_SESSION_TOKEN}}" --user ec2-user --key-file ../devops.pem





